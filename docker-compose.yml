# Remove or comment out the version line
# version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: 2oU702Kevfobzz4uXIisFR4fPFjt7ZiEvFUqDHf9GGc=
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5


  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #     ZOOKEEPER_SYNC_LIMIT: 2
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - aurora-net
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 40s

  redis:
    image: redis:7
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - aurora-net
    # healthcheck:
    #   test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    healthcheck:
      test: ["CMD", "mongosh", "-u", "${MONGO_USER}", "-p", "${MONGO_PASSWORD}", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # feast:
  #   image: feastdev/feature-server:0.36.0
  #   environment:
  #     FEAST_REDIS_HOST: redis
  #     FEAST_POSTGRES_HOST: postgres
  #     FEAST_POSTGRES_DB: ${POSTGRES_DB:-aurora_events}
  #     FEAST_POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     FEAST_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aurora123}
  #     FEAST_REPO_CONFIG: /feast/feature_store.yaml
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./feast:/feast
  #   ports:
  #     - "6566:6566"  # Add this line to expose the port
  #   networks:
  #     - aurora-net
  #   command: ["feast", "serve", "--host", "0.0.0.0", "--port", "6566"]
  #   working_dir: /feast
  feast:
    image: feastdev/feature-server:0.36.0
    environment:
      FEAST_REDIS_HOST: redis
      FEAST_POSTGRES_HOST: postgres
      FEAST_POSTGRES_DB: ${POSTGRES_DB}
      FEAST_POSTGRES_USER: ${POSTGRES_USER:-postgres}
      FEAST_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      FEAST_REPO_CONFIG: /feast/feature_store.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./feast:/feast
    networks:
      - aurora-net
    command: ["feast", "serve", "--host", "0.0.0.0", "--port", "6566"]
    working_dir: /feast
    ports:
      - "6566:6566"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6566/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:9.5.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      API_VERSION: ${API_VERSION:-v1alpha1}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aurora-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  aurora-net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
